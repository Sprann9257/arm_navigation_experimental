<launch>

  <param name="warehouse_host" value="localhost"/>
  <param name="warehouse_port" value="27021"/>
  <node name="mongo" type="wrapper.py" pkg="mongodb">
    <param name="overwrite" value="false"/>
    <param name="database_path" value="arm_navigation_dbs/pr2_real"/>
  </node>

  <!-- send parameters for multidof -->
  <rosparam command="load" ns="robot_description_planning" file="$(find pr2_arm_navigation_config)/config/pr2_planning_description.yaml" />

  <rosparam command="load" file="$(find pr2_arm_navigation_config)/config/joint_limits_right_left.yaml"/>

  <include file="$(find pr2_arm_navigation_perception)/launch/laser+stereo-perception.launch"/>

  <!--include file="$(find pr2_arm_navigation_planning)/launch/chomp_planning.launch"/-->
  <include file="$(find move_arm_warehouse)/launch/chomp_planning.launch"/>

  <node pkg="planning_environment" type="environment_server" output="screen" name="environment_server">      
    <param name="use_monitor" type="bool" value="true"/>
    <param name="use_collision_map" type="bool" value="true"/>
  </node>

  <node pkg="planning_environment" type="planning_scene_validity_server" output="screen" name="planning_scene_validity_server"/>      
  
  <node pkg="pr2_arm_kinematics_constraint_aware" type="pr2_arm_kinematics_constraint_aware" name="pr2_right_arm_kinematics" output="screen">    
    <!-- IK parameters -->
    <param name="tip_name" value="r_wrist_roll_link" />     
    <param name="root_name" value="torso_lift_link" />  

    <param name="group" type="string" value="right_arm" />
  </node>
  <node pkg="pr2_arm_kinematics_constraint_aware" type="pr2_arm_kinematics_constraint_aware" name="pr2_left_arm_kinematics" output="screen">    
    <!-- IK parameters -->
    <param name="tip_name" value="l_wrist_roll_link" />     
    <param name="root_name" value="torso_lift_link" />  

    <param name="group" type="string" value="left_arm" />
  </node>

  <node pkg="ompl_ros_interface" type="ompl_ros" name="ompl_planning" output="screen">
    <rosparam command="load" file="$(find pr2_arm_navigation_planning)/config/right_left_arm_groups.yaml" />
    <rosparam command="load" file="$(find pr2_arm_navigation_planning)/config/ompl_planning.yaml" />
  </node>

  <node name="interpolated_ik_node_right" pkg="interpolated_ik_motion_planner" 
	type="interpolated_ik_motion_planner.py" args="r" respawn="false"/>
  <node name="interpolated_ik_node_left" pkg="interpolated_ik_motion_planner" 
	type="interpolated_ik_motion_planner.py" args="l" respawn="false"/>

  <node pkg="trajectory_filter_server" name="trajectory_filter_server" type="trajectory_filter_server" output="screen">
    <rosparam command="load" file="$(find pr2_arm_navigation_config)/config/joint_limits_right_left.yaml"/>
    <rosparam command="load" file="$(find move_arm_warehouse)/config/filters.yaml"/>
    <!--rosparam command="load" file="$(find pr2_arm_navigation_filtering)/config/filters.yaml"/-->
    <!--rosparam command="load" file="$(find chomp_motion_planner)/config/filters.yaml"/-->
  </node>

  <!-- Called when left arm executes trajectory using controllers -->
  <param name="execute_left_trajectory" value="/l_arm_controller/follow_joint_trajectory" />

  <!-- Called when right arm executes trajectory using controllers -->
  <param name="execute_right_trajectory" value="/r_arm_controller/follow_joint_trajectory" />

  <!-- Called to get left arm inverse kinematics with collision checking -->
  <param name="left_ik_name" value="/pr2_left_arm_kinematics/get_constraint_aware_ik" />

  <!-- Called to get right arm inverse kinematics with collision checking -->
  <param name="right_ik_name" value="/pr2_right_arm_kinematics/get_constraint_aware_ik" />

  <!-- Called to get left arm inverse kinematics without collision checking -->
  <param name="non_coll_left_ik_name" value="/pr2_left_arm_kinematics/get_ik" />

  <!-- Called to get right arm inverse kinematics without collision checking -->
  <param name="non_coll_right_ik_name" value="/pr2_right_arm_kinematics/get_ik" />

  <!-- Kinematic chain group name representing the left arm -->
  <param name="left_arm_group" value="left_arm" />

  <!-- Kinematic chain group name representing the right arm -->
  <param name="right_arm_group" value="right_arm" />

  <!-- Degree of freedom representing inverse kinematics redundancy on the left arm -->
  <param name="left_redundancy" value="l_upper_arm_roll_joint" />

  <!-- Degree of freedom representing inverse kinematics redundancy on the right arm -->
  <param name="right_redundancy" value="r_upper_arm_roll_joint" />

  <!-- Link on the left arm to perform inverse kinematics for -->
  <param name="left_ik_link" value="l_wrist_roll_link" />

  <!-- Link on the right arm to perform inverse kinematics for -->
  <param name="right_ik_link" value="r_wrist_roll_link" />

  <!-- Called to plan trajectories given motion plan requests -->
  <!--<param name="planner_service_name" value="/ompl_planning/plan_kinematic_path" />-->
  <param name="planner_service_name" value="/chomp_planner_longrange/" />

  <!-- Interpolates between end effector positions for the left arm -->
  <param name="left_interpolate_service_name" value="/l_interpolated_ik_motion_plan" />

  <!-- Interpolates between end effector positions for the right arm -->
  <param name="right_interpolate_service_name" value="/r_interpolated_ik_motion_plan" />

  <!-- Called to smooth and optimize a planner trajectory -->
  <param name="trajectory_filter_service_name" value="/trajectory_filter_server/filter_trajectory_with_constraints" />

  <!-- Called to get the proximity space -->
  <param name="proximity_space_service_name" value="none" />

  <!-- Called to get collision validity of robot state -->
  <param name="proximity_space_validity_name" value="none"/>

  <!-- Called to produce a plan that pulls trajectories out of collision -->
  <param name="proximity_space_planner_name" value="none"/>

  <!-- Called to send the planning scene to the environment server -->
  <param name="set_planning_scene_diff_name" value="environment_server/set_planning_scene_diff"/>

  <param name="use_robot_data" value="true"/>
  
  <param name="vis_topic_name" value="planning_scene_visualizer_markers"/>

</launch>
