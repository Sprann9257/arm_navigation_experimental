<launch>
  <param name="warehouse_host" value="localhost"/>
  <param name="warehouse_port" value="27021"/>

  <node name="planning_scene_warehouse_viewer" pkg="move_arm_warehouse" type="planning_scene_warehouse_viewer"/>

  <!-- Called when left arm executes trajectory using controllers -->
  <param name="execute_left_trajectory" value="/l_arm_controller/follow_joint_trajectory" />

  <!-- Called when right arm executes trajectory using controllers -->
  <param name="execute_right_trajectory" value="/r_arm_controller/follow_joint_trajectory" />

  <!-- Called to get left arm inverse kinematics with collision checking -->
  <param name="left_ik_name" value="/pr2_left_arm_kinematics/get_constraint_aware_ik" />

  <!-- Called to get right arm inverse kinematics with collision checking -->
  <param name="right_ik_name" value="/pr2_right_arm_kinematics/get_constraint_aware_ik" />

  <!-- Called to get left arm inverse kinematics without collision checking -->
  <param name="non_coll_left_ik_name" value="/pr2_left_arm_kinematics/get_ik" />

  <!-- Called to get right arm inverse kinematics without collision checking -->
  <param name="non_coll_right_ik_name" value="/pr2_right_arm_kinematics/get_ik" />

  <!-- Kinematic chain group name representing the left arm -->
  <param name="left_arm_group" value="left_arm" />

  <!-- Kinematic chain group name representing the right arm -->
  <param name="right_arm_group" value="right_arm" />

  <!-- Degree of freedom representing inverse kinematics redundancy on the left arm -->
  <param name="left_redundancy" value="l_upper_arm_roll_joint" />

  <!-- Degree of freedom representing inverse kinematics redundancy on the right arm -->
  <param name="right_redundancy" value="r_upper_arm_roll_joint" />

  <!-- Link on the left arm to perform inverse kinematics for -->
  <param name="left_ik_link" value="l_wrist_roll_link" />

  <!-- Link on the right arm to perform inverse kinematics for -->
  <param name="right_ik_link" value="r_wrist_roll_link" />

  <!-- Called to plan trajectories given motion plan requests -->
  <param name="planner_1_service_name" value="/ompl_planning/plan_kinematic_path" />
  <param name="planner_2_service_name" value="/chomp_planner_longrange/plan_path" />

  <!-- Interpolates between end effector positions for the left arm -->
  <param name="left_interpolate_service_name" value="/l_interpolated_ik_motion_plan" />

  <!-- Interpolates between end effector positions for the right arm -->
  <param name="right_interpolate_service_name" value="/r_interpolated_ik_motion_plan" />

  <!-- Called to smooth and optimize a planner trajectory -->
  <param name="trajectory_filter_service_name" value="/trajectory_shortcutting_filter_server/filter_trajectory_with_constraints" />
  <param name="trajectory_filter_2_service_name" value="/trajectory_smoothing_filter_server/filter_trajectory_with_constraints" />

   <!-- Called to get the proximity space -->
   <param name="proximity_space_service_name" value="/collision_proximity_server_test/get_distance_aware_plan"/>
     
   <!-- Called to get collision validity of robot state -->
   <param name="proximity_space_validity_name" value="/collision_proximity_server_test/get_state_validity"/>

  <!-- Called to produce a plan that pulls trajectories out of collision -->
  <param name="proximity_space_planner_name" value="none"/>

  <!-- Called to send the planning scene to the environment server -->
  <param name="set_planning_scene_diff_name" value="environment_server/set_planning_scene_diff"/>

  <param name="use_robot_data" value="true"/>
  
  <param name="vis_topic_name" value="planning_scene_visualizer_markers"/>
</launch>
